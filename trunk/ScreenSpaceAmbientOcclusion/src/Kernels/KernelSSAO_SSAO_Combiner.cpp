/**
 *	Eduardo Ceretta Dalla Favera
 *  eduardo.ceretta@gmail.com
 *  Jan 2013
 *
 *  Combines a previous calculated ao with a screen space ao
 */

#include "KernelSSAO_SSAO_Combiner.h"
#include "GLUtils/GLProjectionMatrix.h"
/**
 * Sampler texture data.
 *  Creates a 1D texture containing the respective index of the neighborhood access
 */
#define SAMPLER_VECTOR

#if 1
  //      *****#******#***#****
  //      ******#**************
  //      ******#**************
  //      *********#*##********
  //      ****#**#*##*##*******
  //      ******#####*##**#****
  //      *******####*##*#*#***
  //      ***#*#*****##***#****
  //      **#**#####*##********
  //      ****##***#######*****
  //      **#*######0#*###*#***
  //      ******#*####*####**##
  //      *#***##**##*#####****
  //      ***##*#####**##*##***
  //      *****###*##*###******
  //      *****##*####**#**#***
  //      *****#**##**#*#*#*#**
  //      *********##*##*******
  //      ******#***#**#*******
  //      ***************#*****
  //      *********************
  //#define SAMPLER_VECTOR_SIZE 508
  //#define SAMPLER_VECTOR_DATA { \
  //  -1, -1, 0, 0, -1, 0, 0, 0, -1, 1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0 \
  //  , 1, -1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, -2, -2, 0, 0, -2, -1, 0, 0 \
  //  , -2, 1, 0, 0, -2, 2, 0, 0, -1, 2, 0, 0, 0, -2, 0, 0, 1, -2, 0, 0 \
  //  , 2, -1, 0, 0, 2, 0, 0, 0, 2, 2, 0, 0, -3, 1, 0, 0, -3, 2, 0, 0 \
  //  , -2, -3, 0, 0, -1, 3, 0, 0, 0, -3, 0, 0, 0, 3, 0, 0, 1, 3, 0, 0 \
  //  , 2, 3, 0, 0, 3, -3, 0, 0, 3, -2, 0, 0, 3, -1, 0, 0, 3, 0, 0, 0 \
  //  , 3, 3, 0, 0, -4, -3, 0, 0, -4, -2, 0, 0, -4, -1, 0, 0, -4, 0, 0, 0 \
  //  , -4, 2, 0, 0, -4, 3, 0, 0, -2, -4, 0, 0, -1, 4, 0, 0, 0, -4, 0, 0 \
  //  , 0, 4, 0, 0, 1, -4, 0, 0, 1, 4, 0, 0, 2, -4, 0, 0, 2, 4, 0, 0 \
  //  , 3, -4, 0, 0, 3, 4, 0, 0, 4, -4, 0, 0, 4, -3, 0, 0, 4, -1, 0, 0 \
  //  , 4, 0, 0, 0, 4, 2, 0, 0, 4, 3, 0, 0, 4, 4, 0, 0, -5, -4, 0, 0 \
  //  , -5, -3, 0, 0, -5, -2, 0, 0, -5, -1, 0, 0, -5, 0, 0, 0, -5, 2, 0, 0 \
  //  , -5, 3, 0, 0, -4, 5, 0, 0, -3, -5, 0, 0, -2, -5, 0, 0, -1, -5, 0, 0 \
  //  , -1, 5, 0, 0, 0, -5, 0, 0, 0, 5, 0, 0, 1, 5, 0, 0, 2, -5, 0, 0 \
  //  , 2, 5, 0, 0, 4, -5, 0, 0, 5, -5, 0, 0, 5, -4, 0, 0, 5, -2, 0, 0 \
  //  , 5, -1, 0, 0, 5, 0, 0, 0, 5, 1, 0, 0, 5, 4, 0, 0, -6, -6, 0, 0 \
  //  , -6, -3, 0, 0, -6, -1, 0, 0, -6, 0, 0, 0, -6, 2, 0, 0, -6, 3, 0, 0 \
  //  , -5, 6, 0, 0, -3, 6, 0, 0, -1, -6, 0, 0, 0, -6, 0, 0, 1, 6, 0, 0 \
  //  , 2, 6, 0, 0, 3, -6, 0, 0, 3, 6, 0, 0, 6, -5, 0, 0, 6, -2, 0, 0 \
  //  , 6, -1, 0, 0, 6, 2, 0, 0, 6, 4, 0, 0, 6, 6, 0, 0, -7, -1, 0, 0 \
  //  , -7, 1, 0, 0, -7, 2, 0, 0, -4, 7, 0, 0, -3, -7, 0, 0, 0, 7, 0, 0 \
  //  , 3, -7, 0, 0, 3, 7, 0, 0, 5, 7, 0, 0, 7, -1, 0, 0, 7, 0, 0, 0 \
  //  , 7, 2, 0, 0, 7, 3, 0, 0, -8, -4, 0, 0, -2, -8, 0, 0, 0, -8, 0, 0 \
  //  , 6, 8, 0, 0, 8, -4, 0, 0, 8, 0, 0, 0, 8, 3, 0, 0, -9, -4, 0, 0 \
  //  , 1, 9, 0, 0, 2, -9, 0, 0, 9, 5, 0, 0, -10, -5, 0, 0, -10, 2, 0, 0 \
  //  , -10, 6, 0, 0, 1, 10, 0, 0 \
  //}
  #define SAMPLER_VECTOR_SIZE 254
  #define SAMPLER_VECTOR_DATA { \
  -1,	-1,	-1,	0,	-1,	1,	0,	-1,	0,	1,	\
  1,	-1,	1,	0,	1,	1,	-2,	-2,	-2,	-1,	\
  -2,	1,	-2,	2,	-1,	2,	0,	-2,	1,	-2,	\
  2,	-1,	2,	0,	2,	2,	-3,	1,	-3,	2,	\
  -2,	-3,	-1,	3,	0,	-3,	0,	3,	1,	3,	\
  2,	3,	3,	-3,	3,	-2,	3,	-1,	3,	0,	\
  3,	3,	-4,	-3,	-4,	-2,	-4,	-1,	-4,	0,	\
  -4,	2,	-4,	3,	-2,	-4,	-1,	4,	0,	-4,	\
  0,	4,	1,	-4,	1,	4,	2,	-4,	2,	4,	\
  3,	-4,	3,	4,	4,	-4,	4,	-3,	4,	-1,	\
  4,	0,	4,	2,	4,	3,	4,	4,	-5,	-4,	\
  -5,	-3,	-5,	-2,	-5,	-1,	-5,	0,	-5,	2,	\
  -5,	3,	-4,	5,	-3,	-5,	-2,	-5,	-1,	-5,	\
  -1,	5,	0,	-5,	0,	5,	1,	5,	2,	-5,	\
  2,	5,	4,	-5,	5,	-5,	5,	-4,	5,	-2,	\
  5,	-1,	5,	0,	5,	1,	5,	4,	-6,	-6,	\
  -6,	-3,	-6,	-1,	-6,	0,	-6,	2,	-6,	3,	\
  -5,	6,	-3,	6,	-1,	-6,	0,	-6,	1,	6,	\
  2,	6,	3,	-6,	3,	6,	6,	-5,	6,	-2,	\
  6,	-1,	6,	2,	6,	4,	6,	6,	-7,	-1,	\
  -7,	1,	-7,	2,	-4,	7,	-3,	-7,	0,	7,	\
  3,	-7,	3,	7,	5,	7,	7,	-1,	7,	0,	\
  7,	2,	7,	3,	-8,	-4,	-2,	-8,	0,	-8,	\
  6,	8,	8,	-4,	8,	0,	8,	3,	-9,	-4,	\
  1,	9,	2,	-9,	9,	5,	-10,	-5,	-10,	2, \
  -10,	6,	1,	10	\
  }
#else
//      *************************
//      *****************#*******
//      *********#*#*************
//      **********#**************
//      ****#****#****#**********
//      ********#*##***#*#*******
//      *******#***#**#####**#*#*
//      *#****#**#####*##*##*****
//      **#***######*#####*******
//      **#*****##########*#**#**
//      ***#*##***##*####**#*****
//      **#***############*#*#***
//      ******######0*##*###*****
//      #*##**########*######****
//      *******####*######*******
//      ******###*###*####*#*****
//      *******###*####****##****
//      *****######**#######*****
//      **#*#**#***###*##******#*
//      ******#****#*#***********
//      ********####*##**********
//      *******#*****###*********
//      *************###*********
//      ******#*#***##*******#***
//      *******#**********#******
  #define SAMPLER_VECTOR_SIZE 740
  #define SAMPLER_VECTOR_DATA { \
    -1, -1, 0, 0, 0, -1, 0, 0, 1, -1, 0, 0, -1, 0, 0, 0, -1, 1, 0, 0 \
    , 0, 1, 0, 0, 1, 1, 0, 0, -2, -2, 0, 0, -1, -2, 0, 0, 1, -2, 0, 0 \
    , 2, -2, 0, 0, -2, -1, 0, 0, 2, -1, 0, 0, -2, 0, 0, 0, 2, 0, 0, 0 \
    , -2, 1, 0, 0, -2, 2, 0, 0, 0, 2, 0, 0, 1, 2, 0, 0, 2, 2, 0, 0 \
    , -3, -3, 0, 0, -2, -3, 0, 0, -1, -3, 0, 0, 0, -3, 0, 0, 1, -3, 0, 0 \
    , 2, -3, 0, 0, 3, -3, 0, 0, 3, -2, 0, 0, -3, -1, 0, 0, 3, -1, 0, 0 \
    , -3, 0, 0, 0, 3, 0, 0, 0, -3, 1, 0, 0, 3, 1, 0, 0, -3, 2, 0, 0 \
    , 3, 2, 0, 0, -2, 3, 0, 0, -1, 3, 0, 0, 0, 3, 0, 0, 2, 3, 0, 0 \
    , 3, 3, 0, 0, -4, -4, 0, 0, -3, -4, 0, 0, -2, -4, 0, 0, -1, -4, 0, 0 \
    , 1, -4, 0, 0, 2, -4, 0, 0, 3, -4, 0, 0, 4, -4, 0, 0, -4, -3, 0, 0 \
    , 4, -3, 0, 0, 4, -2, 0, 0, -4, -1, 0, 0, 4, -1, 0, 0, -4, 0, 0, 0 \
    , -4, 1, 0, 0, 4, 1, 0, 0, -4, 2, 0, 0, 4, 2, 0, 0, -4, 3, 0, 0 \
    , 4, 3, 0, 0, -4, 4, 0, 0, -3, 4, 0, 0, -1, 4, 0, 0, 0, 4, 0, 0 \
    , 1, 4, 0, 0, 2, 4, 0, 0, -3, -5, 0, 0, -2, -5, 0, 0, -1, -5, 0, 0 \
    , 0, -5, 0, 0, 1, -5, 0, 0, 3, -5, 0, 0, 4, -5, 0, 0, -5, -4, 0, 0 \
    , 5, -4, 0, 0, 5, -3, 0, 0, -5, -1, 0, 0, 5, -1, 0, 0, -5, 0, 0, 0 \
    , 5, 0, 0, 0, -5, 1, 0, 0, 5, 1, 0, 0, -5, 2, 0, 0, 5, 2, 0, 0 \
    , -5, 3, 0, 0, 5, 3, 0, 0, -5, 4, 0, 0, -5, 5, 0, 0, -4, 5, 0, 0 \
    , -3, 5, 0, 0, -2, 5, 0, 0, 1, 5, 0, 0, 2, 5, 0, 0, 3, 5, 0, 0 \
    , 4, 5, 0, 0, 5, 5, 0, 0, -5, -6, 0, 0, -1, -6, 0, 0, 2, -6, 0, 0 \
    , 3, -6, 0, 0, 4, -6, 0, 0, 5, -6, 0, 0, 6, -6, 0, 0, -6, -5, 0, 0 \
    , 6, -5, 0, 0, -6, -4, 0, 0, -6, -2, 0, 0, -6, -1, 0, 0, -6, 0, 0, 0 \
    , 6, 0, 0, 0, -6, 1, 0, 0, 6, 1, 0, 0, -6, 3, 0, 0, -6, 5, 0, 0 \
    , 6, 5, 0, 0, -5, 6, 0, 0, -1, 6, 0, 0, 0, 6, 0, 0, 1, 6, 0, 0 \
    , 3, 6, 0, 0, 4, 6, 0, 0, -4, -7, 0, 0, -2, -7, 0, 0, -1, -7, 0, 0 \
    , 3, -7, 0, 0, 5, -7, 0, 0, 7, -5, 0, 0, 7, -3, 0, 0, -7, -2, 0, 0 \
    , 7, -2, 0, 0, 7, -1, 0, 0, 7, 0, 0, 0, 7, 1, 0, 0, 7, 3, 0, 0 \
    , 7, 4, 0, 0, -7, 5, 0, 0, 7, 5, 0, 0, -6, 7, 0, 0, -1, 7, 0, 0 \
    , 1, 7, 0, 0, -8, -8, 0, 0, -3, -8, 0, 0, 2, -8, 0, 0, 8, 1, 0, 0 \
    , 8, 4, 0, 0, -8, 6, 0, 0, -4, 8, 0, 0, -3, 8, 0, 0, -2, 8, 0, 0 \
    , -1, 8, 0, 0, 1, 8, 0, 0, 2, 8, 0, 0, -2, -9, 0, 0, 9, -6, 0, 0 \
    , -9, -2, 0, 0, 9, -1, 0, 0, -9, 1, 0, 0, -5, 9, 0, 0, 1, 9, 0, 0 \
    , 2, 9, 0, 0, 3, 9, 0, 0, -3, -10, 0, 0, -1, -10, 0, 0, -10, -4, 0, 0 \
    , -10, -3, 0, 0, 10, -3, 0, 0, -10, -1, 0, 0, -10, 1, 0, 0, -10, 6, 0, 0 \
    , 1, 10, 0, 0, 2, 10, 0, 0, 3, 10, 0, 0, 5, -11, 0, 0, 11, -6, 0, 0 \
    , -11, -5, 0, 0, 11, 6, 0, 0, -6, 11, 0, 0, -4, 11, 0, 0, 0, 11, 0, 0 \
    , 1, 11, 0, 0, 9, 11, 0, 0, -12, 1, 0, 0, -5, 12, 0, 0, 6, 12, 0, 0 \
  }
#endif



KernelSSAO_SSAO_Combiner::KernelSSAO_SSAO_Combiner(char* path, int width, int height, 
  GLuint depth_normalTexId, GLuint ao_to_combineTexId)
: KernelBase(path, "ssao_ssao_combine.vert", "ssao_ssao_combine.frag", width, height){
	//Output
  m_colorTexId = addOutput(0);

	//Input
	m_shader->setActive(true);
    addInputTexture(GL_TEXTURE_2D, "depth_normalTex", depth_normalTexId);
    addInputTexture(GL_TEXTURE_2D, "aoTex", ao_to_combineTexId);

#ifdef SAMPLER_VECTOR_SIZE
    //addInputTexture(GL_TEXTURE_1D, "sampleTex", createSampleTexture());
    //addInputFloat("samplerSize", (GLfloat)SAMPLER_VECTOR_SIZE/4.0f);
    
    GLfloat pixels[] = SAMPLER_VECTOR_DATA;
    addInputFloatArray("sampleArray", pixels, SAMPLER_VECTOR_SIZE);
    addInputFloat("samplerSize", (GLfloat)SAMPLER_VECTOR_SIZE/2.0f);
#endif

    addInputFloat("screenWidth", width);
    addInputFloat("screenHeight", height);
	m_shader->setActive(false);
}

KernelSSAO_SSAO_Combiner::~KernelSSAO_SSAO_Combiner(){

}

GLuint KernelSSAO_SSAO_Combiner::getColorTexId() const
{
  return m_colorTexId; 
}

void KernelSSAO_SSAO_Combiner::step(GLProjectionMatrix* projectionMatrix, float rfar, GLfloat offsets_size, GLfloat intensity)
{
  float z_near = projectionMatrix->getNear();
  float z_far = projectionMatrix->getFar();
  float right = projectionMatrix->getRight();
  float top = projectionMatrix->getTop();

  m_shader->setActive(true);
    addInputFloat("rfar", rfar);
    addInputFloat("near", z_near);
    addInputFloat("far", z_far);
    addInputFloat("right", right);
    addInputFloat("top", top);
    addInputFloat("offsets_size", offsets_size);
    addInputFloat("intensity", intensity);
  m_shader->setActive(false);
  
  KernelBase::step();
}


GLuint KernelSSAO_SSAO_Combiner::createSampleTexture()
{
  GLenum target = GL_TEXTURE_1D;
  int mem_size = SAMPLER_VECTOR_SIZE / 4;

  GLfloat pixels[] = SAMPLER_VECTOR_DATA;

  GLuint dummyTexId;
  glGenTextures(1, &dummyTexId);
  glBindTexture(target, dummyTexId);
  glTexParameterf(target, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
  glTexParameterf(target, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
  glTexParameterf(target, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
  glTexParameterf(target, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
  glTexParameteri(target, GL_GENERATE_MIPMAP, GL_TRUE); 
  glTexImage1D(GL_TEXTURE_1D, 0, GL_RGBA32F_ARB, mem_size, 0, GL_RGBA, GL_FLOAT, pixels);
  glBindTexture(target, 0);
  return dummyTexId;
}