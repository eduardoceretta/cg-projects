
#ifndef TOP_LISTENERS_H
#define TOP_LISTENERS_H

class TopModel;

/**
    Mesh modification event listener. 
    When on of these events happen (e.g., when a cohesive element is inserted), 
  the appropriate method, if the listener is registered in the model, is called 
  to notify of a change in the model.
    The events generated by the mesh edition methods are indicated in the 
  documentation of these methods.
*/
class TOPS_API TopModelEditListener
{
public:
  virtual ~TopModelEditListener() {}

  /** Invoked after a new node is inserted into the model. */
  virtual void InsertNode(TopModel* m, TopNode n) {}
  /** Invoked before an existing is removed from the model. */
  virtual void RemoveNode(TopModel* m, TopNode n) {}
  /** Invoked after a new node is inserted into the model. */
  virtual void InsertElem(TopModel* m, TopElement el) {}
  /** Invoked before an existing element is removed from the model. */
  virtual void RemoveElem(TopModel* m, TopElement el) {}
  /** Invoked after an existing node is duplicated. */
  virtual void DuplicateNode(TopModel* m, TopNode old_n, TopNode new_n) {}

  /**
    Mesh adaptivity
  */
  /** Invoked after an existing element is split into two new elements. */
  virtual void SplitElem(TopModel* m, TopElement old_el, TopElement new_el[2]) {}
  /** Invoked after two elements are replaced with two other elements. */
  virtual void SwapElem(TopModel* m, TopElement old_el[2], TopElement new_el[2]) {}
  /** Invoked after two elements are merged into a single one. */
  virtual void MergeElem(TopModel* m, TopElement old_el[2], TopElement new_el) {}
  /** Invoked after an edge is split into two new other edges. */
  virtual void SplitEdge(TopModel* m, TopEdge old_e, TopEdge new_e[2]) {}
  /** Invoked after an edge is replaced with another edge */
  virtual void SwapEdge(TopModel* m, TopEdge old_e, TopEdge new_e) {}
  /** Invoked after two edges are merged into a single one. */
  virtual void MergeEdge(TopModel* m, TopEdge old_e[2], TopEdge new_e) {}

  /**
    Experimental (may change in the future!)
  */
  //virtual void InsertVertex(TopModel* m, TopVertex v) {}
  //virtual void InsertEdge(TopModel* m, TopEdge new_e) {}
  //virtual void RemoveVertex(TopModel* m, TopVertex v) {}
  //virtual void RemoveEdge(TopModel* m, TopEdge e) {}
  virtual void JoinFacet(TopModel* m, TopFacet f1, TopFacet f2) {}
  /** Invoked when a node of an existing element is replaced by another. */
//TODO Correct semantics: sometimes it is called before the replacement and after at others.
  virtual void ReplaceElemNode(TopModel* m, TopElement el, int i, TopNode old_n, TopNode new_n) {}
};

/**
    Mesh consistency check listener.
*/
class TOPS_API TopModelConsistencyListener
{
public:
  virtual ~TopModelConsistencyListener() {}
  virtual bool ManifoldFailed(TopModel* m, TopNode n) { return false; }
  virtual bool CohesiveFailed(TopModel* m, TopElement coh) { return false; }
  virtual bool FacetAnchorFailed(TopModel* m, TopFacetUse fu) { return false; }
  virtual bool EdgeAnchorFailed(TopModel* m, TopEdgeUse eu) { return false; }
  virtual bool VertexAnchorFailed(TopModel* m, TopVertexUse vu) { return false; }
};

/**
	Listener for refinement operations of 4K meshes.
*/
class TOPS_API TopModelRefinement4KListener
{
public:
	virtual ~TopModelRefinement4KListener() {}
  virtual void EdgeSplit(TopModel* m,
    TopEdge olde[2], TopEdge newe[4], TopElement oldel[3], TopElement newel[6]) {}
  virtual void EdgeSwapped(TopModel* m,
    TopEdge olde, TopEdge newe, TopElement oldel[2], TopElement newel[2]) {}
  virtual void EdgeCollapsed(TopModel* m,
    TopEdge reme[2], TopEdge olde[2], TopEdge newe, TopElement oldel[4], TopElement newel[2]) {}

//TMP testing without refinement depth at faces
  virtual void CohesiveInserted(TopModel* m, TopElement el) {}
};

#endif